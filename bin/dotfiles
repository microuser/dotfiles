#!/bin/bash

FILE_NAME=${0##*/}
PWD=$(pwd)

# General colors
# black='\033[0;30m'
red='\033[0;31m'
green='\033[0;32m' # '\e[1;32m' is too bright for white bg.
blue='\033[1;34m'
yellow='\033[0;33m'
purple='\033[1;35m'
cyan='\033[0;36m'
endColor='\033[0m'

# Type of messages
__question__="${purple}Question? ${endColor}"
__info__="${blue}Info      ${endColor}"
__warning__="${yellow}Warning!  ${endColor}"
__done__="${green}✔ Done    ${endColor}"
__error__="${red}FAIL      ${endColor}"
__aborted__="${yellow}Action aborted${endColor}"

# Current file variables
__version__="2.3.0"
PROJECT_NAME="The Egel dotfiles"
CURRENT_FILE_DIRECTORY="$(cd "$(dirname "${BASH_SOURCE[0]}" )" && pwd)" #current path to file
PROJECT_CONFIG_NAME=".dotfiles.config"
PROJECT_CONFIG_FILE=$HOME/${PROJECT_CONFIG_NAME}
PROJECT_CONFIG_MISSING_VARIABLE_COUNTER=0
PROJECT_INSTALL_DEFAULTS=
DATE_UTC=$(date +%Y-%m-%dT%TZ)
AUTHOR="Maciej Sypień"
GIT_CURRENT_BRANCH=$(git branch | grep "\*" | cut -d ' ' -f2)
EMAIL_REGEXP="^[a-z0-9!#\$%&'*+/=?^_\`{|}~-]+(\.[a-z0-9!#$%&'*+/=?^_\`{|}~-]+)*@([a-z0-9]([a-z0-9-]*[a-z0-9])?\.)+[a-z0-9]([a-z0-9-]*[a-z0-9])?\$"

IS_MAC=false
IS_LINUX=false
IS_ARCH=false
IS_BASED_ON_UBUNTU_1604=false

if [ "$(uname -s)" == "Darwin" ]; then
  IS_MAC=true
elif [ "$(uname)" == "Linux" ]; then
  if [[ "$(uname -r)" =~ "ARCH" ]]; then
    IS_ARCH=true
  elif [[ -f "/etc/lsb-release" && $(awk 'match($0, /Ubuntu 16.04/) { print substr($0, RSTART, RLENGTH) }' /etc/lsb-release) == "Ubuntu 16.04" ]]; then
    IS_BASED_ON_UBUNTU_1604=true
  elif [[ "$(uname)" == "Linux" ]]; then
    IS_LINUX=true
    # Load dotfiles config vars if the file is available
    # This action is required if we want to suppress message when enter
    if [ -f "${PROJECT_CONFIG_FILE}" ]; then
      # shellcheck source=/dev/null
      . "${PROJECT_CONFIG_FILE}"
    fi
      if [[ ${IS_LINUX} && "${DOTFILES_IGNORE_UBUNTU_VERSION}" != "true" ]]; then
        printf "\n%b This program didn't recognize your Linux distribution\n" "${__warning__}"
        printf "Version (uname -a): %s\n" "$(uname -a)"
        printf "\n%b Do you want continue as Ubuntu 16.04?" "${__question__}"
        read -r -p " (y/N) " _continue_as_ubuntu_1604
        case $_continue_as_ubuntu_1604 in
          y|Y)
            IS_BASED_ON_UBUNTU_1604=true
            ;;
          *)
            exit 1
            ;;
        esac
      fi
  else
    printf "\n%b This program doesn't support this Linux distribution (%s)\n" "${__warning__}" "$(uname -a)"
    printf "\n%b WARNING: Do you want to continue as if it ware 'Linux Ubuntu 16.04'?" "${__question__}"
    read -r -p " (y/N) " _forcefully_continue_as_ubuntu_1604
    case $_forcefully_continue_as_ubuntu_1604 in
      y|Y)
        IS_BASED_ON_UBUNTU_1604=true
        ;;
      *)
        exit 1
        ;;
    esac
  fi
elif [[ $(expr substr "$(uname -s)" 1 10) == "MINGW32_NT" && "$(expr substr $(uname -s) 1 10)" == "MINGW64_NT" ]]; then
  printf "%bThis program doesn't support Windows OS" "${__warning__}"
  exit 1;
elif [[ $(expr substr "$(uname -s)" 1 10) =~ "CYGWIN" ]]; then
  printf "%bThis program doesn't support Cygwin project" "${__warning__}"
  exit 1;
fi

# Config variables (Plugins)
DESTINATION_MUTT_DIR="$HOME/.mutt"

# Current symlinks binding dotfiles
CURRENT_SYMLINKS=(
  "$HOME/.aliases"
  "$HOME/.bashrc"
  "$HOME/.conkyrc"
  "$HOME/.dircolors"
  "$HOME/.editorconfig"
  "$HOME/.gitconfig"
  "$HOME/.gvimrc"
  "$HOME/.ideavimrc"
  "$HOME/.muttrc"
  "$HOME/.muttrc.local"
  "$HOME/.tmux-linux.conf"
  "$HOME/.tmux-osx.conf"
  "$HOME/.tmux.conf"
  "$HOME/.tmux.conf.local"
  "$HOME/.vim"
  "$HOME/.vimrc"
  "$HOME/.vimrc.local"
  "$HOME/.zprofile"
  "$HOME/.zshenv"
  "$HOME/.zshrc"
  "$HOME/.zshrc.local"
  "${DESTINATION_MUTT_DIR}"
)

print_version() {
  printf "v%s\n" "${__version__}"
}

print_section() {
  _section=$1
  printf "\n\n%b#==============================================================================\n" "${cyan}"
  printf "%s\n" "${_section}"
  printf "===============================================================================%b\n" "${endColor}"
}

print_subsection() {
  _subsection=$1
  printf "\n%b#-------------------------------------------------------------------------------\n" "${purple}"
  printf "%s %b\n" "${_subsection}" "${endColor}"
}

print_if_missing_variable() {
  _variable=$1
  _if_string_exsist=$(grep -c -F "$_variable" "$PROJECT_CONFIG_FILE")
  if [[ "$_if_string_exsist" -eq 0 ]]; then
    printf "\n%b Add %b variable to your %s file." "${__info__}" "${yellow}${_variable}${endColor}" "${PROJECT_CONFIG_FILE}"
    PROJECT_CONFIG_MISSING_VARIABLE_COUNTER=$((PROJECT_CONFIG_MISSING_VARIABLE_COUNTER + 1))
  fi
}

print_last_command_status() {
  if [ $? -eq 0 ]; then
    printf " %b\n" "${__done__}"
  else
    printf " %b\n" "${__error__}"
  fi
}

fix_file_or_directory_permission() {
  _file_or_directory=$1
  _permissions=$2

  if [[ "$_file_or_directory" == *"*"* ]]; then
    _type="pattern"
  elif [ -d "$_file_or_directory" ]; then
    _type="directory"
  elif [ -f "$_file_or_directory" ]; then
    _type="file"
  else
    printf "\n%bNo such file, directory or pattern like %b\n" "${__warning__}" "${purple}${_file_or_directory}${endColor}"
    return
  fi

  printf "\n%bFixing permissions for %b %s\n" "${__info__}" "${purple}${_file_or_directory}${endColor}" "${_type}"

  # NOTE: string that might contain magic * must be without quotes!
  chmod -v "${_permissions}" ${_file_or_directory}
  print_last_command_status
}

do_copy_default_config_file() {
  print_subsection "Copy dotfiles default config file"
  cp -fv "${CURRENT_FILE_DIRECTORY}/${PROJECT_CONFIG_NAME}" "${PROJECT_CONFIG_FILE}"
  print_last_command_status
}

do_set_config_vars() {
  # set some vars based on validate config
  PROJECT_REPOSITORY_DIR="${GIT_PROJECT_FOLDER_DIR}/${GIT_PROJECT_FOLDER_NAME}"
  PROJECT_LIB_DIR="$PROJECT_REPOSITORY_DIR/lib"
  PROJECT_SETTINGS_COMMON_DIR="$PROJECT_REPOSITORY_DIR/configuration"
  PROJECT_CONFIGURATOR_FILE="$PROJECT_REPOSITORY_DIR/bin/$FILE_NAME"
}

# Load config variables for the project
if [ -f "$PROJECT_CONFIG_FILE" ]; then
  # shellcheck source=/dev/null
  . "$PROJECT_CONFIG_FILE"

  print_if_missing_variable "GIT_PROJECT_FOLDER_NAME"
  print_if_missing_variable "GIT_PROJECT_FOLDER_DIR"
  print_if_missing_variable "DOTFILES_THEME"

  if [[ "$PROJECT_CONFIG_MISSING_VARIABLE_COUNTER" -gt 0 ]]; then
    exit 1
  fi

  do_set_config_vars
else
  case $1 in
    install)
      # empty because we want to pass it only for installation process.
      # The installation process contains creating default config
      ;;
    *)
      printf "%bMissing %s file.\n" "${__warning__}" "$PROJECT_CONFIG_FILE"
      printf "\n%b Do you want to copy default configuration file to fix it?" "${__question__}"
      read -r -p " (y/N) " _copy_default_configuration
      case $_copy_default_configuration in
        y|Y)
          do_copy_default_config_file
          ;;
        *)
          ;;
      esac
      exit 1
      ;;
  esac
fi

# do before install (yes to all while install)
if [ "$2" == "-y" ]; then # if second arg is -y then
  printf "\n%bInstalling %s with default values for questions!" "${__warning__}" "${PROJECT_NAME}"
  PROJECT_INSTALL_DEFAULTS=1
fi

print_dotfiles_logo() {
  cat "${PROJECT_REPOSITORY_DIR}/bin/.project_logo"
}

# Remove all old symlinks for dotfiles
remove_old_symlinks() {
  for item in "${CURRENT_SYMLINKS[@]}"
  do
    # Removing backup for those files "<file_name>(DATE)"
    # NOTE: string that might contain magic * must be without quotes!
    rm -frv ${item}\(*
  done
}

# Remove current symlinks for dotfiles
remove_current_symlinks() {
  for item in "${CURRENT_SYMLINKS[@]}"
  do
    rm -frv "${item}"
  done
}


# Methods
check_program() {
  __name=$1
  __command=$2
  printf "%b" "${purple}${__name}${endColor}"
  eval "${__command}"
}

# Making simlint to file/folder
make_symlink() {
  __name=$1
  __if=$2 # input file (~/.dotfiles/.vimrc)
  __of=$3 # output file (~/.vimrc)

  printf "\n%b\n" "${purple}$__name${endColor}"

  if [ -f "${__if}" ]; then
    _type="file"
  elif [ -d "${__if}" ]; then
    _type="directory"
  elif [ -L "${__if}" ]; then
    _type="symlink"
  else
    printf "%bNo such file or directory like %b\n" "${__warning__}" "${purple}${__if}${endColor}"
    return
  fi

  _renamed_file="${__of}(${DATE_UTC})"
  if [[ -d ${__of} || -f ${__of} ]]; then
    printf "%b%b %s exist, so safely renaming it as %b\n" "${__info__}" "${purple}${__of}${endColor}" "${_type}" "${purple}${_renamed_file}${endColor}"
    mv "$__of" "${_renamed_file}"
    print_last_command_status
  fi

  if ! [[ -d ${__of} || -f ${__of} ]]; then
    printf "%bSymlinking %b\n" "${__info__}" "${purple}${__of}${endColor}"
  else
    printf "%b%b %s exist, so re-symlinking it\n" "${__info__}" "${purple}${__of}${endColor}" "${_type}"
  fi

  ln -sf "${__if}" "${__of}"
  print_last_command_status
}

is_program_installed() {
  _program=$1
  _install_script=$2

  if hash "${_program}" 2>/dev/null; then
    printf "%bProgram %b already exist at %s\n" "${__done__}" "${blue}${_program}${endColor}" "$(which ${_program})"
  else
    printf "Installing %b program. Please wait.\n" "${blue}${_program}${endColor}"
    eval "${_install_script}"
    print_last_command_status
  fi;
}

create_secure_mutt_passwords() {
  # password file name is related with muttrc settings
  _mutt_passwords_path="$HOME/.mutt/passwords.gpg"

  print_section "Creating secure passwords for mutt with GPG"

  if ! [ -d "${DESTINATION_MUTT_DIR}" ]; then
    print_subsection "Symlinking missing mutt directory"
    make_symlink ".mutt" "$PROJECT_SETTINGS_COMMON_DIR/.mutt" "$DESTINATION_MUTT_DIR"
    print_last_command_status
  fi

  printf "%bBelow is your list of gpg:" "${__info__}"
  if [ -z "$(gpg --list-keys)" ]; then
    printf "%bYou have no GPG keys. Generate your pair 'gpg --gen-key'" "${__warning__}"
    printf "or import, then re-run: '%s' to restart creating secure password for mutt" "${FILE_NAME} -mmp"
  else
    gpg --list-keys
    printf "%bIf you want to create new pair of keys, then type: 'gpg --gen-key'\n" "${__info__}"
  fi
  printf "\n%bType your e-mail address (that you are using in gpg; ex.: 'john.doe@gmail.com')\n" "${__info__}"
  read -r -p "E-mail: " _email_address

  if [ -z ${_email_address} ]; then
    printf "%bE-mail cannot be empty\n" "${__warning__}"
    read -r -p "E-mail: " _email_address
  fi

  if [ -z ${_email_address} ]; then
    printf "%bE-mail not set, then exit.\n" "${__error__}"
    exit 1
  fi

  if ! [[ ${_email_address} =~ ${EMAIL_REGEXP} ]]; then
    printf "%bGiven e-mail <${_email_address}> seems to be invalid. Try again.\n" "${__error__}"
    exit 1
  fi

  if [ $(gpg --list-keys | grep -c ${_email_address}) -gt 0 ]; then
    gpg --fingerprint ${_email_address}
    printf "%bIt looks that your e-mail <${_email_address}> might be already there\n" "${__info__}"
    printf "%bDo you want to continue?" "${__question__}"
    read -r -p " (y/N) " _forcefully_continue_creating_gpg_key
    case $_forcefully_continue_creating_gpg_key in
    y|Y)
      ;;
    *)
      printf "%b\n" "${__aborted__}"
      exit 1;
      ;;
    esac
  fi

  printf "%bType your password for <${_email_address}>\nPassword: " "${__info__}"
  read -s _email_password

  printf "\nRetype password: "
  read -s _email_password_retype

  if [ ${_email_password} -ne ${_email_password_retype} ]; then
    printf "Passwords are not equal. Run program again."
    exit 1;
  fi

  # This method will not store passwords on hard drive in plain text, ever!
  _secret="set imap_pass=${_email_password}"
  _secret="${_secret}\nset smtp_pass=${_email_password}"
  echo -e "${_secret}" | gpg -r "${_email_address}" -e -a > "${_mutt_passwords_path}"

  if [ -f "${_mutt_passwords_path}" ]; then
    printf "\n%b Successfully created secure password file for email <%s>\n" "${__done__}" "${_email_address}"
  fi
}

do_help() {
  print_dotfiles_logo
  printf "Sophisticated dotfiles configurator for BASH/ZSH shell.\n\n" "${PROJECT_NAME}"
  printf "OPTIONS\n"
  printf "    backup\n"
  printf "        Create backup from files given into BACKUP_FILES variable\n"
  printf "        located into %s file.\n\n" "${PROJECT_CONFIG_FILE}"
  printf "    clean, -c\n"
  printf "        Clean old installation symlinks for current user home\n"
  printf "        directory (%s).\n\n" "$HOME"
  printf "    clean-all, -ca\n"
  printf "        Clean all installation symlinks for current user home\n"
  printf "        directory (%s)\n\n" "$HOME"
  printf "    install\n"
  printf "        Install and configure %s\n" "${PROJECT_CONFIG_FILE}"
  printf "        for current user.\n\n"
  printf "    list-config, -lc\n"
  printf "        List personal configuration file stored in %s\n" "${PROJECT_CONFIG_FILE}"
  printf "        for current user.\n\n"
  printf "    make-mutt-password, -mmp\n"
  printf "        Creating a secure (gpg) password file for mutt configuration.\n\n"
  printf "    reconfigure, -r\n"
  printf "        Reconfigure %s symlinks for current user\n" "${PROJECT_NAME}"
  printf "        and fix permissions for fragile files and directories.\n\n"
  printf "    update, -u\n"
  printf "        Update %s repository and it submodules.\n\n" "${PROJECT_NAME}"
  printf "    uninstall\n"
  printf "        Uninstall %s from the hard drive.\n\n" "${PROJECT_NAME}"
  printf "    -h, --help\n"
  printf "        Show help.\n\n"
  printf "    --version\n"
  printf "        Print the version of %s.\n\n" "${PROJECT_NAME}"
  printf "LOCAL CONFIG FILE\n"
  printf "    %s\n\n" "${PROJECT_CONFIG_FILE}"
  printf "EXAMPLES OF USAGE\n"
  printf "    Since %s is installed globally you can just type i.e.:\n" "${FILE_NAME}"
  printf "        %s --help\n" "${FILE_NAME}"
  printf "        %s install\n" "${FILE_NAME}"
  printf "        %s reconfigure\n" "${FILE_NAME}"
  printf "\n%s 2014-%s - %s - License MIT.\n" "${PROJECT_NAME}" "$(date +%Y)" "${AUTHOR}"
  printf "Further info at https://github.com/egel/dotfiles\n"
  exit 1;
}

do_update() {
  print_section "Updating ${PROJECT_NAME}"
  if ! [[ -d "${PROJECT_REPOSITORY_DIR}" ]]; then
      printf "\n%b %s doesn't exist at %b. Perhaps you want to install it first?\n" "${__question__}" "${PROJECT_NAME}" "${blue}${PROJECT_REPOSITORY_DIR}${endColor}"
      exit 1;
  else
    if [[ "$GIT_CURRENT_BRANCH" != "master" ]]; then
      printf "\n%b %s repository is in %b git branch.\n" "${__warning__}" "${PROJECT_NAME}" "${red}${GIT_CURRENT_BRANCH}${endColor}"
      printf "\n%b Do you want to switch from %b to %b and continue?" "${__question__}" "${red}${GIT_CURRENT_BRANCH}${endColor}" "${green}master${endColor}"
      read -r -p " (y/N) " _switch_to_master_branch_by_force
        case $_switch_to_master_branch_by_force in
        y|Y)
          printf "\n%bSwitching %s to master branch (by force):%b" "${purple}" "${PROJECT_NAME}" "${endColor}"
          git --git-dir="${PROJECT_REPOSITORY_DIR}/.git" --work-tree="${PROJECT_REPOSITORY_DIR}" checkout --force master > /dev/null 2>&1
          print_last_command_status
          ;;
        *)
          printf "%b\n" "${__aborted__}"
          exit 1;
          ;;
      esac
    fi

    printf "\n%bUpdating %s repository:%b" "${purple}" "${PROJECT_NAME}" "${endColor}"
    git --git-dir="${PROJECT_REPOSITORY_DIR}/.git" --work-tree="${PROJECT_REPOSITORY_DIR}" fetch > /dev/null 2>&1

    printf "\n%bUpdating %s submodules repositories:%b" "${purple}" "${PROJECT_NAME}" "${endColor}"
    git --git-dir="${PROJECT_REPOSITORY_DIR}/.git" submodule update --init --recursive > /dev/null 2>&1
    print_last_command_status
    printf "\n"
  fi
}

do_install() {
  print_section "Installing ${PROJECT_NAME}"

  if [[ "$PROJECT_INSTALL_DEFAULTS" -ne 1 ]]; then # default: install -y
    printf "Answer for few questions to adjust your configuration preferences.\n"
    printf "\n%b Do you want to configure mutt with secured gpg password?" "${__question__}"
    read -r -p " (y/N) " _configure_secure_mutt_gpg
  else
    _configure_secure_mutt_gpg="n"
  fi

  # ask only if config exist and user run install again
  if [ -f "$PROJECT_CONFIG_FILE" ]; then
    printf "\n%b You already have %s config file at %b\n" "${__warning__}" "${FILE_NAME}" "${blue}${PROJECT_CONFIG_FILE}${endColor}"
    if [[ "$PROJECT_INSTALL_DEFAULTS" -ne 1 ]]; then # default: install -y
      printf "%bDo you want to copy default configuration file to override current one?" "${__question__}"
      read -r -p " (y/N) " _copy_default_configuration
    else
      _copy_default_configuration="n"
    fi

    # creating default config if set
    case $_copy_default_configuration in
      y|Y)
        do_copy_default_config_file
        # shellcheck source=/dev/null
        . "$PROJECT_CONFIG_FILE"    # include/import config variables from file
        do_set_config_vars        # recreate project vars on proper config paths
        ;;
      *)
        ;;
    esac
  else
    # force create default config file
    do_copy_default_config_file
    # shellcheck source=/dev/null
    . "$PROJECT_CONFIG_FILE"    # include/import config variables from file
    do_set_config_vars        # recreate project vars on proper config paths
  fi

  if [[ "$PROJECT_INSTALL_DEFAULTS" -ne 1 ]]; then # default: install -y
    printf "\n%bDo you want to change shell ZSH (current: %s) and install OH-MY-ZSH?" "${__question__}" "${SHELL}"
    read -r -p " (y/N) " _install_zsh_and_ohmyzsh
  else
    _install_zsh_and_ohmyzsh="n"
  fi

  # update dotfiles repository
  if [[ "$PROJECT_INSTALL_DEFAULTS" -ne 1 ]]; then # default: install -y
    printf "\n%bDo you want to update %s repository to latest version?" "${__question__}" "${PROJECT_NAME}"
    read -r -p " (y/N) " _update_repository
  else
    _update_repository="n"
  fi

  # symlink dotfiles program (same for Darwin and Linux)
  print_subsection "Symlinking ${FILE_NAME} configurator program"
  _destination_directory_for_configurator=/usr/local/bin
  [ -d ${_destination_directory_for_configurator} ] || mkdir -p ${_destination_directory_for_configurator}
  sudo ln -vsf "$PROJECT_CONFIGURATOR_FILE" "${_destination_directory_for_configurator}/"
  if [ -L "${_destination_directory_for_configurator}/${FILE_NAME}" ]; then
    printf "\n%bFile symlinked successfully.\n" "${__done__}"
  else
    printf "\n%bFile symlinked failed.\n" "${__error__}"
  fi

  if $IS_MAC; then
    print_subsection "Installing brew - Mac OSX package manager"
    ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"

    print_subsection "Installing required programs"
    brew install coreutils
    brew install wget
    brew install curl
    brew install zsh
    brew install tmux
    brew install lua
    brew install python
    brew install python3
    brew install gpg2
    brew install shellcheck

    brew install vim --with-lua --with-python3
    brew install macvim --with-lua --with-python3 --with-cscope --with-override-system-vim
    brew install reattach-to-user-namespace # for copy from tmux to mac namespace

    brew linkapps vim
    brew linkapps macvim
  elif $IS_BASED_ON_UBUNTU_1604; then
    print_subsection "Installing required software for further steps"
    sudo apt-get install -y software-properties-common

    print_subsection "Checking and adding PPA repositories"
    printf "Git PPA"
    sudo add-apt-repository -y ppa:git-core/ppa
    print_last_command_status

    printf "Tmux PPA"
    sudo add-apt-repository -y ppa:pi-rho/dev
    print_last_command_status

    printf "TLP PPA"
    sudo add-apt-repository -y ppa:linrunner/tlp
    print_last_command_status

    print_subsection "Updating and installing required programs"
    sudo apt-get update
    sudo apt-get install -y python-software-properties software-properties-common curl wget xdg-utils fontconfig build-essential libssl-dev
    print_last_command_status

    sudo apt-get install -y editorconfig git zsh tmux
    print_last_command_status

    sudo apt-get install gnupg2 # security tool used i.e. for mutt
    print_last_command_status

    sudo apt-get install -y shellcheck # for checking syntax in vim for *.sh files
    print_last_command_status

    sudo apt-get install -y tlp tlp-rdw
    print_last_command_status

    print_subsection "Install and compile Vim from source files"
    # Install vim
    sudo apt-get remove -y --purge vim vim-runtime vim-gnome vim-tiny vim-common vim-gui-common
    print_last_command_status

    sudo apt-get install -y liblua5.1-dev luajit libluajit-5.1
    print_last_command_status

    sudo apt-get install -y python-dev python3-dev ruby-dev libperl-dev mercurial libncurses5-dev libgnome2-dev libgnomeui-dev libgtk2.0-dev libatk1.0-dev libbonoboui2-dev libcairo2-dev libx11-dev libxpm-dev libxt-dev
    print_last_command_status

    cd /tmp || exit
    git clone https://github.com/vim/vim.git
    ./configure --with-features=huge \
                --enable-multibyte \
                --enable-gui=auto \
                --enable-gtk2-check \
                --enable-gtk3-check \
                --enable-gnome-check \
                --enable-cscope \
                --enable-largefile \
                --enable-pythoninterp=dynamic --with-python-config-dir="$(python-config --configdir)" \
                --enable-python3interp=dynamic --with-python3-config-dir="$(python3-config --configdir)" \
                --enable-perlinterp \
                --enable-rubyinterp=dynamic \
                --enable-luainterp=dynamic \
                --with-luajit \
                --with-x \
                --prefix=/usr \
                --with-compiledby="${AUTHOR}" \
                --enable-fail-if-missing
    make VIMRUNTIMEDIR=/usr/share/vim/vim80
    sudo make install

    print_subsection "Set VIM as default editor"
    sudo update-alternatives --install /usr/bin/editor editor /usr/bin/vim 1
    sudo update-alternatives --set editor /usr/bin/vim
    sudo update-alternatives --install /usr/bin/vi vi /usr/bin/vim 1
    sudo update-alternatives --set vi /usr/bin/vim
  elif $IS_ARCH; then
    sudo -S pacman -Syu

    # gvim - contains also vim + gvim https://www.archlinux.org/news/vimgvim-72411-update/
    # cmus - console player + optional libs
    sudo -S pacman -S \
      git \
      gvim \
      zsh \
      wget curl \
      tmux \
      gnupg \
      shellcheck \
      tor \
      cmus libmp4v2 opusfile \
      dia \
      tlp \
      tlp-rdw \
      lsb-release \
      smartmontools

    # Enable TLP
    sudo systemctl enable tlp.service
    sudo systemctl enable tlp-sleep.service
    sudo systemctl enable NetworkManager-dispatcher.service
    sudo systemctl mask systemd-rfkill.service
  fi

  print_subsection "Checking programs"
  check_program "vim:\t" "vim --version | head -n1"
  check_program "tmux:\t" "tmux -V"
  check_program "git:\t" "git --version"

  # change shell to ZSH + oh-my-zsh
  case $_install_zsh_and_ohmyzsh in
    y|Y)
      print_subsection "Changing default shell to ZSH"
      sudo chsh -s "$(which zsh)"
      print_last_command_status

      print_subsection "Installing oh-my-zsh"
      wget https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O - | sh
      print_last_command_status
      ;;
    *)
      ;;
  esac

  if $IS_BASED_ON_UBUNTU_1604; then
    print_subsection "Restore privacy for Ubuntu"
    wget -q -O - https://fixubuntu.com/fixubuntu.sh | bash
    print_last_command_status
  fi

  case $_update_repository in
    y|Y)
      ${PROJECT_CONFIGURATOR_FILE} update
      ;;
    *)
      ;;
  esac

  print_subsection "Downloading submodules of ${PROJECT_NAME} repository"
  git --git-dir="${PROJECT_REPOSITORY_DIR}/.git" --work-tree="${PROJECT_REPOSITORY_DIR}" submodule update --init --recursive > /dev/null 2>&1
  print_last_command_status

  # link honukai to oh-my-zsh themes
  print_subsection "Symlink honukai to oh-my-zsh themes"
  make_symlink "honukai.zsh-theme" "${PROJECT_LIB_DIR}/honukai-iterm-zsh/honukai.zsh-theme" "$HOME/.oh-my-zsh/themes/honukai.zsh-theme"

  # call program reconfigure option
  ${PROJECT_CONFIGURATOR_FILE} reconfigure

  print_subsection "Installing NeoBundle - Vim plugin manager"
  curl https://raw.githubusercontent.com/Shougo/neobundle.vim/master/bin/install.sh | sh
  print_last_command_status

  print_subsection "Installing Hack font"
  if $IS_MAC; then
    brew cask install caskroom/fonts/font-hack
    print_last_command_status
  elif $IS_BASED_ON_UBUNTU_1604; then
    sudo apt-get install fonts-hack-ttf
    print_last_command_status
  elif $IS_ARCH; then
    sudo -S pacman -S ttf-hack
    print_last_command_status
  fi
  printf "%bTo see more details for Hack font at http://sourcefoundry.org/hack/\n\n" "${__info__}"

  # installing vim plugins (need to be after reconfiguration process of dotfiles configurator)
  print_subsection "Installing NeoBundle vim plugins"
  printf "%bThis operation might take some time.\n" "${__info__}"
  eval "$HOME/.vim/bundle/neobundle.vim/bin/neoinstall"
  print_last_command_status

  # creating secure passwords file for mutt
  case $_configure_secure_mutt_gpg in
    y|Y)
      create_secure_mutt_passwords
      ;;
    *)
      ;;
  esac

  if $IS_MAC; then
    print_subsection "\nUpdating brew manager"
    printf "%bBe patient, it may take a while ;)" "${__info__}"
    printf "%bUpdate brew\n" "${__info__}"
    brew update
    print_last_command_status

    printf "%bDoctor brew\n" "${__info__}"
    brew doctor
    print_last_command_status
  fi

  printf "\n\n%b" "${green}Congratulations!${endColor}\n"
  printf "Configuration of %s complete successfully.\n" "${PROJECT_NAME}"
  printf "Now you could run: '%s' to find more about the configurator.\n" "${FILE_NAME} --help"

  printf "\n%b To finalize installation of ZSH shell, you need to reboot the system.\n" "${__info__}"
  if [[ "$PROJECT_INSTALL_DEFAULTS" -ne 1 ]]; then # default: install -y
    printf "%bWould you like to do it now?" "${__question__}"
    read -r -p " (y/N) " _reboot_now
  else
    _reboot_now="n"
  fi

  if [[ $_reboot_now =~ ^([yY]) ]]; then
    printf "%bNow rebooting the system..." "${__info__}"
    sudo reboot
  else
    printf "%bRebooting canceled by User" "${__info__}"
  fi
}

do_fix_permissions() {
  # According to http://superuser.com/q/215504/250469
  print_section "Fix permissions for fragile files and directories"
  fix_file_or_directory_permission "$HOME" 755

  SSH_DIR="$HOME/.ssh"
  fix_file_or_directory_permission "${SSH_DIR}" 700

  fix_file_or_directory_permission "${SSH_DIR}/authorized_keys" 640

  fix_file_or_directory_permission "${SSH_DIR}/*.pub" 644
  fix_file_or_directory_permission "${SSH_DIR}/id_rsa" 600

  fix_file_or_directory_permission "${HOME}/.aliases.private" 700
}

do_uninstall() {
  print_section "Uninstall ${PROJECT_NAME}"
  printf "%bAre you sure you want to uninstall %s?" "${__question__}" "${PROJECT_NAME}"
  read -r -p " (y/N) " _uninstall_repo
  case $_uninstall_repo in
    y|Y)
      if [[ -d "$PROJECT_REPOSITORY_DIR" && "$PROJECT_REPOSITORY_DIR" == ^. ]]; then
        rm "$PROJECT_REPOSITORY_DIR" -rf
      fi
      printf "%b\n" "${__done__}"
      exit 1;
      ;;
    *)
      printf "%bAborting uninstalling of ." "${__info__}" "${PROJECT_NAME}"
      ;;
  esac
}


do_reconfigure() {
  print_section "Reconfigure ${PROJECT_NAME}"
  make_symlink ".aliases" "${PROJECT_SETTINGS_COMMON_DIR}/.aliases" "$HOME/.aliases"
  make_symlink ".bashrc" "${PROJECT_SETTINGS_COMMON_DIR}/.bashrc" "$HOME/.bashrc"
  make_symlink ".dircolors" "${PROJECT_LIB_DIR}/dircolors-solarized/dircolors.256dark" "$HOME/.dircolors"
  make_symlink ".editorconfig" "${PROJECT_SETTINGS_COMMON_DIR}/.editorconfig" "$HOME/.editorconfig"
  make_symlink ".gitconfig" "${PROJECT_SETTINGS_COMMON_DIR}/.gitconfig" "$HOME/.gitconfig"
  make_symlink ".gvimrc" "${PROJECT_SETTINGS_COMMON_DIR}/.gvimrc" "$HOME/.gvimrc"
  make_symlink ".ideavimrc" "${PROJECT_SETTINGS_COMMON_DIR}/.ideavimrc" "$HOME/.ideavimrc"
  make_symlink ".mutt" "${PROJECT_SETTINGS_COMMON_DIR}/.mutt" "$HOME/.mutt"
  make_symlink ".muttrc" "${PROJECT_SETTINGS_COMMON_DIR}/.muttrc" "$HOME/.muttrc"
  make_symlink ".muttrc.local" "${PROJECT_SETTINGS_COMMON_DIR}/.muttrc.local" "$HOME/.muttrc.local"
  make_symlink ".tmux-osx.conf" "${PROJECT_SETTINGS_COMMON_DIR}/.tmux-osx.conf" "$HOME/.tmux-osx.conf"
  make_symlink ".tmux-linux.conf" "${PROJECT_SETTINGS_COMMON_DIR}/.tmux-linux.conf" "$HOME/.tmux-linux.conf"
  make_symlink ".tmux.conf" "${PROJECT_SETTINGS_COMMON_DIR}/.tmux.conf" "$HOME/.tmux.conf"
  make_symlink ".tmux.conf.local" "${PROJECT_SETTINGS_COMMON_DIR}/.tmux.conf.local" "$HOME/.tmux.conf.local"
  make_symlink ".vim" "${PROJECT_SETTINGS_COMMON_DIR}/.vim" "$HOME/.vim"
  make_symlink ".vimrc" "${PROJECT_SETTINGS_COMMON_DIR}/.vimrc" "$HOME/.vimrc"
  make_symlink ".zshenv" "${PROJECT_SETTINGS_COMMON_DIR}/.zshenv" "$HOME/.zshenv"
  make_symlink ".zshrc" "${PROJECT_SETTINGS_COMMON_DIR}/.zshrc" "$HOME/.zshrc"
  make_symlink ".zshrc.local" "${PROJECT_SETTINGS_COMMON_DIR}/.zshrc.local" "$HOME/.zshrc.local"

  # $PATH variable not properly set in gvim/MacVim => http://stackoverflow.com/a/24542893/1977012
  make_symlink ".zprofile" "${PROJECT_SETTINGS_COMMON_DIR}/.zprofile" "$HOME/.zprofile"


  # Copy specyfic folders
  case $DOTFILES_THEME in
    desktop)
      make_symlink ".conkyrc" "${PROJECT_LIB_DIR}/conky-themes/conky_seamod/.conkyrc" "$HOME/.conkyrc" # only for desktops (servers terminals not need GUI)
      ;;
    server)
      ;;
  esac

  printf "\n\n%b\n" "${yellow}Checking NeoBundle:${endColor}"
  wget https://raw.githubusercontent.com/Shougo/neobundle.vim/master/bin/install.sh -q -O - | bash
  print_last_command_status

  # fixing the permissions
  do_fix_permissions
}

do_clean() {
  print_section "Clean ${PROJECT_NAME}"
  printf "%bAre you sure you want to clean old %s symlinks?" "${__question__}" "${PROJECT_NAME}"
  read -r -p " (y/N) " _cleaning_symlinks
  case $_cleaning_symlinks in
    y|Y)
      printf "Removing previous/old symlinks of %s\n" "${PROJECT_NAME}"
      remove_old_symlinks
      printf "%b\n" "${__done__}"
      exit 1;
      ;;
    *)
      printf "%bAborting cleaning of %s symlinks." "${__info__}" "${PROJECT_NAME}"
      ;;
  esac
}

do_clean_all() {
  print_section "Clean ${PROJECT_NAME}"
  printf "%bAre you sure you want to clean ALL %s symlinks?" "${__question__}" "${PROJECT_NAME}"
  read -r -p " (y/N) " _cleaning_symlinks
  case $_cleaning_symlinks in
    y|Y)
      printf "Removing all symlinks of %s\n" "${PROJECT_NAME}"
      remove_old_symlinks
      remove_current_symlinks
      printf "%b\n" "${__done__}"
      exit 1;
      ;;
    *)
      printf "%bAborting cleaning of %s symlinks." "${__info__}" "${PROJECT_NAME}"
      ;;
  esac
}

do_list_local_config() {
  cat "${PROJECT_CONFIG_FILE}"
}

do_backup() {
  print_section "Making backup of your private files"

  if [ ${#BACKUP_FILES[@]} -eq 0 ]; then
    printf "%bThere is no backup files set yet. Add BACKUP_FILES to %s\n" "${__warning__}" "${PROJECT_CONFIG_FILE}"
    exit 1;
  fi

  BACKUP_DIR="${BACKUP_DIR}(${DATE_UTC})" # UTC but local
  printf "%bWrite backup directory (default path: '%s')\n" "${__info__}" "${BACKUP_DIR}"
  read -r -p " " _backup_dir
  if [ -n "${_backup_dir}" ]; then # if not empty
    BACKUP_DIR=${_backup_dir}
  fi

  mkdir -p "${BACKUP_DIR}"
  for item in "${BACKUP_FILES[@]}"
  do
    if [ -L "${item}" ]; then # symlinks
      cp -L "$item" "$BACKUP_DIR"
    elif [ -d "${item}" ]; then # directory
      cp -R -f "$item" "$BACKUP_DIR"
    elif [ -f "${item}" ]; then # file
      cp -f "$item" "$BACKUP_DIR"
    fi
    echo -e "Backup of $item completed ${__done__}"
  done

}

# Main
case "$1" in
  clean|-c)
    do_clean
    ;;
  clean-all|-ca)
    do_clean_all
    ;;
  --help|-h)
    do_help
    ;;
  list-config|-lc)
    do_list_local_config
    ;;
  install|-i)
    do_install
    ;;
  reconfigure|-r)
    do_reconfigure
    ;;
  make-mutt-password|-mmp)
    create_secure_mutt_passwords
    ;;
  fix-permissions|-fp)
    do_fix_permissions
    ;;
  uninstall)
    do_uninstall
    ;;
  update|-u)
    do_update
    ;;
  backup)
    do_backup
    ;;
  --version)
    print_version
    ;;
  *)
    printf "\nNothing happened %b\n" "\xe2\x98\xba"
    printf "Run: '%s' to print help menu.\n" "${FILE_NAME} --help"
    exit 1
    ;;
esac

shift "$((OPTIND - 1))"

